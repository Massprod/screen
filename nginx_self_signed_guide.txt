Here’s a detailed guide, gathering all the commands you need to create a **self-signed certificate** and **self-signed key**, along with the relevant **NGINX configuration**, including descriptions for each line of the configuration.

---

### Step-by-Step Guide to Create a Self-Signed Certificate and Key

1. **Generate a Private Key**:
   ```bash
   openssl genrsa -out /etc/ssl/private/selfsigned.key 2048
   ```
   - **Description**: This command generates a 2048-bit RSA private key and saves it to `/etc/ssl/private/selfsigned.key`. You need this private key for the certificate generation and for NGINX.

2. **Generate a Self-Signed Certificate**:
   ```bash
   openssl req -new -x509 -key /etc/ssl/private/selfsigned.key -out /etc/ssl/certs/selfsigned.crt -days 365
   ```
   - **Description**: This command creates a new X.509 certificate (self-signed) using the private key generated in step 1. It’s valid for 365 days and saved in `/etc/ssl/certs/selfsigned.crt`. You’ll be prompted to provide some basic information, like country, organization, etc.

3. **Create a Diffie-Hellman Group (Optional but recommended for better security)**:
   ```bash
   openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
   ```
   - **Description**: This command generates a 2048-bit Diffie-Hellman group, which improves the security of your SSL connection. It is saved in `/etc/ssl/certs/dhparam.pem`. This is optional but recommended for stronger encryption.

---

### NGINX Configuration with Descriptions

Add the following to your **NGINX configuration file** (for example: `/etc/nginx/conf.d/default.conf`):

```nginx
# HTTP to HTTPS Redirection Block
server {
    listen 80;  # Listen on port 80 for HTTP requests
    server_name localhost;  # Server name is localhost (or your domain)

    location / {
        return 301 https://$host$request_uri;  # Redirect all HTTP requests to HTTPS
    }
}

# HTTPS Server Block
server {
    listen 443 ssl;  # Listen on port 443 for HTTPS traffic
    server_name localhost;  # The server name (domain or IP), e.g., localhost for local testing

    # Paths to the SSL certificate and private key
    ssl_certificate /etc/ssl/certs/selfsigned.crt;  # Path to the self-signed certificate
    ssl_certificate_key /etc/ssl/private/selfsigned.key;  # Path to the self-signed private key

    # SSL protocol and cipher settings
    ssl_protocols TLSv1.2 TLSv1.3;  # Use secure TLS protocols only
    ssl_prefer_server_ciphers on;  # Use server's cipher preference order
    ssl_ciphers HIGH:!aNULL:!MD5;  # Only allow strong ciphers (disables weak ones)

    # Optional: Diffie-Hellman parameters for better security
    ssl_dhparam /etc/ssl/certs/dhparam.pem;  # Path to Diffie-Hellman group file

    # Add a security header for better HTTPS security
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;  # Enforce HTTPS for 1 year

    # Define the location for reverse proxying requests
    location / {
        proxy_pass http://smart_screen_web:5000;  # Proxy requests to your Flask app running on port 5000
        proxy_set_header Host $host;  # Pass the original Host header
        proxy_set_header X-Real-IP $remote_addr;  # Pass the client's real IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Pass the client's original IP (for proxies)
        proxy_set_header X-Forwarded-Proto $scheme;  # Pass the protocol (HTTP or HTTPS)
    }
}
```

---

### Detailed Explanation of the NGINX Config

- **`listen 80;`**: This tells NGINX to listen for HTTP requests on port 80. It's used to redirect all HTTP traffic to HTTPS.
- **`server_name localhost;`**: This is the server’s hostname or domain name. For local environments, `localhost` is used.
- **`return 301 https://$host$request_uri;`**: This permanently redirects all HTTP requests to the corresponding HTTPS address.
- **`listen 443 ssl;`**: This makes NGINX listen on port 443 (the default port for HTTPS) and enables SSL for this server block.
- **`ssl_certificate /etc/ssl/certs/selfsigned.crt;`**: This is the path to the self-signed certificate you created.
- **`ssl_certificate_key /etc/ssl/private/selfsigned.key;`**: This is the path to the private key you created.
- **`ssl_protocols TLSv1.2 TLSv1.3;`**: This restricts the server to using only the TLSv1.2 and TLSv1.3 protocols, which are secure.
- **`ssl_prefer_server_ciphers on;`**: This tells the server to use its preferred ciphers over the client’s.
- **`ssl_ciphers HIGH:!aNULL:!MD5;`**: This specifies strong SSL ciphers and excludes weak ones (`aNULL`, `MD5`).
- **`ssl_dhparam /etc/ssl/certs/dhparam.pem;`**: This enables Diffie-Hellman parameters for better security (optional, but improves encryption).
- **`add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;`**: This enforces HTTPS and tells browsers to only communicate via HTTPS for the next year.
- **`proxy_pass http://smart_screen_web:5000;`**: This sends all requests to the Flask application running at `http://smart_screen_web:5000` (change to your app name or service).
- **`proxy_set_header Host $host;`**: This passes the original `Host` header to the proxied server.
- **`proxy_set_header X-Real-IP $remote_addr;`**: This passes the client’s IP address to the proxied server.
- **`proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;`**: This appends the client’s original IP address if it has gone through multiple proxies.
- **`proxy_set_header X-Forwarded-Proto $scheme;`**: This passes the protocol (HTTP or HTTPS) used by the client.

---

This setup ensures that your NGINX is configured to handle HTTPS traffic securely, with all necessary headers, ciphers, and SSL settings. You will still receive a browser warning for a self-signed certificate on local environments, but your connection will remain secure.